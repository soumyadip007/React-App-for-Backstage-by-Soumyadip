apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: react-app-scaffolding-for-github
  title: DevConf - React App Scaffolding for Github
  description: Scaffolding for the basic React App. It has SPAship installed as the dev dependency with the deployment process and the Github CI with. You can directly run the CI for deployment or run that locally for testing.
  tags:
    - react
    - vite
    - spaship
    - github
    - ci
    - template
spec:
  owner: spaship-dev
  type: website
  parameters:
    - title: Provide the informations for your Application
      required:
        - spa_name
        - spa_path
      properties:
        spa_name:
          title: Your Application Name
          type: string
          description: Application name [eg. test, home, index]
          ui:field: EntityNamePicker
        spa_path:
          title: Your Application Path
          type: string
          description: Application path [eg. /, /home, /index]
          ui:field: EntityNamePicker
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: React App Scaffolding
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts:
          - github.com
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}
    # - id: register
    #   name: Register
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
    #     catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
